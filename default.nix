# This file was auto-generated by cabal2nix. Please do NOT edit manually!

{ cabal, aeson, asn1Types, attoparsec, blazeBuilder, blazeHtml
, conduit, dataDefault, esqueleto, fastLogger, fileEmbed
, highlighter, hjsmin, hspec, httpConduit, httpTypes, lens
, liftedBase, markdown, monadControl, monadLogger, MonadRandom
, network, pathPieces, pcreLight, persistent, persistentPostgresql
, persistentTemplate, resourcet, shakespeare, text, thyme
, transformers, wai, waiExtra, waiLogger, warp, yaml, yesod
, yesodAuth, yesodCore, yesodForm, yesodNewsfeed, yesodPagination
, yesodStatic, yesodTest, stdenv

, postgresql
, src
}:

cabal.mkDerivation (self: {
  pname = "webapp2";
  version = "0.0.0";
  inherit src;
  isLibrary = true;
  isExecutable = true;
  buildTools = [ postgresql ];
  buildDepends = [
    aeson asn1Types attoparsec blazeBuilder blazeHtml conduit
    dataDefault esqueleto fastLogger fileEmbed highlighter hjsmin
    httpConduit httpTypes lens markdown monadControl monadLogger
    MonadRandom network pathPieces pcreLight persistent
    persistentPostgresql persistentTemplate shakespeare text thyme wai
    waiExtra waiLogger warp yaml yesod yesodAuth yesodCore yesodForm
    yesodNewsfeed yesodPagination yesodStatic
  ];
  testDepends = [
    hspec liftedBase monadLogger persistent persistentPostgresql
    resourcet text transformers yesod yesodCore yesodTest
  ];
  preCheck = let
    testUser = "webapp-test";
    testDb = "webapp-test";
  in ''
    cleanup() {
      trap - EXIT
      echo "removing database ${testDb}"
      dropdb ${testDb} || true
      echo "removing user ${testUser}"
      dropuser ${testUser} || true
    }
    trap cleanup EXIT
    createuser ${testUser}
    createdb ${testDb} -O ${testUser}
    export PGHOST=localhost
    export PGDATABASE=${testDb}
    export PGUSER=${testUser}
  '' + stdenv.lib.optionalString stdenv.isDarwin ''
    ln -s /usr/bin/security $TMPDIR
    export PATH=$PATH:$TMPDIR
  '';
  postCheck = "cleanup";
  noHaddock = 1;
  doCheck = false;
  postInstall = ''
    cp -pR static $out/static
    cp -pR config $out/config
  '';
  meta = {
    license = self.stdenv.lib.licenses.bsd3;
    platforms = self.ghc.meta.platforms;
  };
})
